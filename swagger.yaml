swagger: '2.0'
info:
  description: This is the openrouteservice API documentation. Version `4.6`
  version: '4.6'
  title: Openrouteservice
  contact:
    email: support@openrouteservice.org
  license:
    name: MIT
    url: 'https://github.com/swagger-api/swagger-ui/blob/master/LICENSE'
host: api.openrouteservice.org
tags:
  - name: Directions
    description: Get directions for different modes of transport
  - name: Geocoding
    description: Resolve input coordinates to addresses and vice versa
  - name: Isochrones
    description: Obtain areas of reachability from given locations
  - name: Places
    description: Search for points of interest around points or in geometries
  - name: Matrix
    description: >-
      Obtain one-to-many, many-to-one and many-to-many matrices for time and
      distance
schemes:
  - https
produces:
  - application/json; charset=utf-8
security:
  - UserSecurity:
      - api_key
paths:
  /directions:
    get:
      tags:
        - Directions
      summary: Directions Service
      description: >
        Returns a route between two or more locations for a selected profile and
        its settings as GeoJSON response.
      parameters:
        - name: api_key
          in: query
          description: |
            Insert your API Key here.
          type: string
          required: true
          default: your-api-key
        - name: coordinates
          in: query
          description: >
            Pipe (|) separated List of longitude,latitude coordinates visited in
            order.


            Example values:
              `8.34234,48.23424`
              `8.34423,48.26424`
          required: true
          type: array
          items:
            type: string
          collectionFormat: pipes
          default:
            - '8.34234,48.23424|8.34423,48.26424'
        - name: profile
          in: query
          description: Specifies the route profile.
          required: true
          type: string
          enum:
            - driving-car
            - driving-hgv
            - cycling-regular
            - cycling-road
            - cycling-safe
            - cycling-mountain
            - cycling-tour
            - cycling-electric
            - foot-walking
            - foot-hiking
            - wheelchair
          default: driving-car
        - name: preference
          in: query
          description: Specifies the route preference.
          type: string
          default: fastest
          enum:
            - fastest
            - shortest
            - recommended
        - name: format
          in: query
          description: >-
            Specifies the response format. The GPX schema the response is
            validated against can be found
            [here](https://raw.githubusercontent.com/GIScience/openrouteservice-schema/master/gpx/v1/ors-gpx.xsd).
          type: string
          default: geojson
          enum:
            - geojson
            - gpx
        - name: units
          in: query
          description: Specifies the distance unit.
          type: string
          default: m
          enum:
            - m
            - km
            - mi
        - name: language
          in: query
          description: Language for the route instructions.
          type: string
          default: en
          enum:
            - cn
            - de
            - en
            - es
            - ru
            - dk
            - fr
            - it
            - nl
            - br
            - se
            - tr
            - gr
        - name: geometry
          in: query
          description: Specifies whether to return geometry.
          type: boolean
          default: true
          enum:
            - true
            - false
        - name: geometry_format
          in: query
          description: >
            Sets the format of the returned geometry. Note that for
            `elevation=true` `encodedpolyline` also encodes the height
            information of each point.

            To decode, please use a suitable library (for example
            [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).
          type: string
          default: encodedpolyline
          enum:
            - encodedpolyline
            - geojson
            - polyline
        - name: geometry_simplify
          in: query
          description: >
            Specifies whether to simplify the geometry. `true` will
            automatically be set to `false` if `extra_info` parameter is
            specified."
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: instructions
          in: query
          description: Specifies whether to return instructions.
          type: boolean
          default: true
          enum:
            - true
            - false
        - name: instructions_format
          in: query
          description: Select `html` for more verbose instructions.
          type: string
          default: text
          enum:
            - html
            - text
        - name: roundabout_exits
          in: query
          description: >-
            Provides bearings of the entrance and all passed roundabout exits.
            Adds the `exit_bearings` array to the `step` object in the response.
            Default: `false`.
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: attributes
          in: query
          description: >
            Pipe (|) separated List of route attributes:

            * `avgspeed` - Returns average speed of each segment and the route
            in km/h.

            * `detourfactor` - Returns the deviation of a segment compared to a
            straight line (1) from A to B.

            * `percentage` - Returns the proportion of the route for each
            segment.
          type: array
          collectionFormat: pipes
          uniqueItems: true
          items:
            type: string
            enum:
              - avgspeed
              - detourfactor
              - percentage
        - name: maneuvers
          in: query
          description: >-
            Specifies whether the maneuver object is included into the `step`
            object or not. Default: `false`.
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: radiuses
          in: query
          description: >
            A pipe (`|`) delimited list of maximum distances (measured in
            meters) that limit the search of nearby road segments to every given
            waypoint.

            The values must be greater than `0`, the value of `-1` specifies no
            limit in the search.

            The number of radiuses correspond to the number of waypoints.
          type: array
          collectionFormat: pipes
          items:
            type: number
            format: float
        - name: bearings
          in: query
          description: >
            Specifies a pipe (|) delimited list of pairs (bearings and
            deviations) to filter the segments of the road network a waypoint
            can snap to. For example `bearings=45,10|120,20`. 

            Each pair is a comma-separated list that can consist of one or two
            float values, where the first value is the bearing and the second
            one is the allowed deviation from the bearing. The bearing can take
            values between `0` and `360` clockwise from true north.

            If the deviation is not set, then the default value of `100` degrees
            is used. The number of pairs must correspond to the number of
            waypoints.
             Setting `optimized=false` is mandatory for this feature to work for all profiles.
            The number of bearings corresponds to the length of waypoints-1 or
            waypoints. If the bearing information for the last waypoint is
            given, then this will control the sector from which the destination
            waypoint may be reached. You can skip a bearing for a certain
            waypoint by passing an empty value for a pair, e.g. `30,20||40,20`.
          type: array
          collectionFormat: pipes
          items:
            type: string
            format: 'bearing,deviation'
        - name: continue_straight
          in: query
          description: >-
            Forces the route to keep going straight at waypoints restricting
            uturns there even if it would be faster. This setting will work for
            all profiles except for `driving-*`. In this case you will have to
            set `optimized=false` for it to work. Default: `false`.
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: elevation
          in: query
          description: >-
            Specifies whether to return elevation values for points. Please note
            that elevation also gets encoded for
            `geometry_format=encodedpolyline`.
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: extra_info
          in: query
          description: >-
            Pipe (|) separated List of additional information. Returns
            information on
            [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness),
            [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability),
            [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface),
            [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory),
            [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype),
            [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways)
            or [trail
            difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty) 
          type: array
          items:
            type: string
            enum:
              - steepness
              - suitability
              - surface
              - waycategory
              - waytype
              - tollways
              - traildifficulty
          collectionFormat: pipes
          uniqueItems: true
          default:
            - steepness
        - name: optimized
          in: query
          description: |
            Uses contraction hierarchies if available (`false`).
          type: boolean
          default: true
          enum:
            - true
            - false
        - name: options
          in: query
          description: >
            For advanced options formatted as json object. For structure refer
            to the [these
            examples](https://github.com/GIScience/openrouteservice-docs#examples).

            The available parameters are:


              - `maximum_speed` : Specifies a maximum travel speed restriction in km/h.


              - `avoid_features` : Pipe (|) separated list of features to avoid.
                The available features are :

                  |     Feature         | Available for                               |
                  |:-------------------:|---------------------------------------------|
                  | `highways`          | driving-*                                   |
                  | `tollways`          | driving-*                                   |
                  | `ferries`           | driving-\*, cycling-\*, foot-\*, wheelchair |
                  | `tunnels`           | driving-*                                   |
                  | `pavedroads`        | driving-\*, cycling-*                       |
                  | `unpavedroads`      | driving-\*, cycling-*                       |
                  | `tracks`            | driving-*                                   |
                  | `fords`             | driving-\*, cycling-\*, foot-*              |
                  | `steps`             | cycling-\*, foot-\*, wheelchair             |
                  | `hills`             | cycling-\*, foot-\*                         |

              - `avoid_borders` : `"all"` for no border crossing. `"controlled"` to cross open borders but avoid controlled ones. Only for `driving-*` profiles.
              
              - `avoid_countries` : Pipe (|) separated list of countries to exclude from routing with `driving-*` profiles. Can be used together with `"avoid_features": "controlledborders"`. `"11|193"` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://github.com/GIScience/openrouteservice-docs#country-list).

              - `vehicle_type` (for `profile=driving-hgv` only): `hgv`,`bus`,`agricultural`,`delivery`,`forestry` and `goods`. It is needed for **vehicle restrictions** to work.


              - `profile_params` : Specifies additional routing parameters.
                - `weightings`: Weightings will prioritize specified factors over the shortest path.

                  - `steepness_difficulty`: Specifies the fitness level for `cycling-*` profiles.
                    - `level`: `0` = Novice, `1` = Moderate, `2` = Amateur, `3` = Pro. The prefered gradient increases with level

                  - `green`: Specifies the Green factor for `foot-*` profiles.
                    - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer ways through green areas over a shorter route.

                  - `quiet`: Specifies the Quiet factor for `foot-*` profiles.
                    - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer quiet ways over a shorter route.

                - `restrictions` : Specifies restrictions for `driving-hgv`, `wheelchair` or `cycling-*` profiles.
                  - for `cycling-*`: 
                      
                      |  Parameter | Description                                                                                                                                                                               |
                      |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                      | `gradient` | Only for avoided `hills` or specified `steepness_difficulty`. Specifies the maximum route steepness in percent. Values range from `1` to `15`. Routes with a higher gradient are avoided. |

                  - for `driving-hgv`: 
                    _(you have to specify the `vehicle_type` in the options for these parameters)_

                      |  Parameter | Description                                                                                                                       |
                      |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|
                      | `length`   | Length restriction in meters.                                                                                                     |
                      | `width`    | Width restriction in meters.                                                                                                      |
                      | `height`   | Height restriction in meters.                                                                                                     |
                      | `axleload` | Axleload restriction in tons.                                                                                                     |
                      | `weight`   | Weight restriction in tons.                                                                                                       |
                      | `hazmat`   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |

                  - for `wheelchair`:

                    |       Parameter       | Description                                                                                                                 |
                    |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|
                    |     `surface_type`    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is `"cobblestone:flattened"`. |
                    |      `track_type`     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is `"grade1"`.        |
                    |   `smoothness_type`   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is `"good"`.    |
                    | `maximum_sloped_curb` | Specifies the maximum height of the sloped curb in meters. Values are `0.03`, `0.06`(default), `0.1` or `any`.              |
                    |   `maximum_incline`   | Specifies the maximum incline as a percentage. `3`, `6`(default), `10`, `15` or `any`.                                      |


              - `avoid_polygons` : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).

            This is an example options object for a `cycling-*` profile:


            ```json

            {
              "maximum_speed": 10,
              "avoid_features": "unpavedroads",
              "profile_params": {
                "weightings": {
                  "steepness_difficulty": {
                    "level": 1
                  },
                  "green": {
                    "factor": 0.8
                  },
                  "quiet": {
                    "factor": 1.0
                  }
                },
                "restrictions": {
                  "gradient": 5
                }
              },
              "avoid_polygons": {
                "type": "Polygon",
                "coordinates": [
                                [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
               ]}
            }

            ```

            The minified form(for copy paste purposes):


            `{"maximum_speed":10,"avoid_features":"unpavedroads","profile_params":{"weightings":{"steepness_difficulty":{"level":1},"green":{"factor":0.8},"quiet":{"factor":1.0}},"restrictions":{"gradient":5}},"avoid_polygons":{"type":"Polygon","coordinates":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}`


            More examples can be found
            [here](https://github.com/GIScience/openrouteservice-docs#examples).
          type: string
          default: '{}'
        - name: id
          in: query
          description: >-
            Arbitrary identification string of the request reflected in the meta
            information.
          type: string
      responses:
        '200':
          description: >
            Standard response for successfully processed requests. Returns JSON.
            The decoded values of the extra information can be found
            [here](https://github.com/GIScience/openrouteservice-docs).
          schema:
            $ref: '#/definitions/Routeresponse'
        '400':
          description: The request is incorrect and therefore can not be processed.
        '401':
          description: Authorization field missing.
        '403':
          description: Key not authorised.
        '405':
          description: >-
            The specified HTTP method is not supported. For more details, refer
            to the EndPoint documentation.
        '413':
          description: >-
            The request is larger than the server is able to process, the data
            provided in the request exceeds the capacity limit.
        '500':
          description: >
            An unexpected error was encountered and more detailed internal error
            code is provided.


            | Internal Code | Description                                       
            |

            |:-------------:|----------------------------------------------------|

            | 2000 |  Unable to parse JSON request. |

            | 2001 |  Required parameter is missing. |

            | 2002 |  Invalid parameter format. |

            | 2003 |  Invalid parameter value. |

            | 2004 |  Parameter value exceeds the maximum allowed limit. |

            | 2006 |  Unable to parse the request to the export handler. |

            | 2007 |  Unsupported export format. |

            | 2008 |  Empty Element. |

            | 2099 |  Unknown internal error. |
          schema:
            $ref: '#/definitions/error'
        '501':
          description: >-
            Indicates that the server does not support the functionality needed
            to fulfill the request.
        '503':
          description: The server is currently unavailable due to overload or maintenance.
  /geocoding:
    get:
      tags:
        - Geocoding
      summary: Geocoding Service
      description: >
        This endpoint can be used for geocoding (specified `query`) and reverse
        geocoding requests (specified `location`)


        **Either** `query` **or** `location` **has to be specified for a valid
        request!**


        If both parameters are specified `location` takes precedence.


        - **geocoding:** Returns a JSON formatted list of objects corresponding
        to the search input.

        - **reverse geocoding:** Returns the next enclosing object with an
        address tag which surrounds the given coordinate.
      parameters:
        - name: api_key
          in: query
          description: |
            Insert your API Key here.
          type: string
          required: true
          default: your-api-key
        - name: query
          in: query
          description: >-
            Name of location, street address or postal code. For a structured
            geocoding request, a JSON object can be passed.  Please refer to the
            `Geocoding structured query` in the model section below. Examples
            can be found
            [here](https://github.com/GIScience/openrouteservice-docs#geocoding-structured-query). 
          type: string
          default: Heidelberg
        - name: location
          in: query
          description: 'Coordinate to be inquired. [longitude,latitude]'
          type: string
          default: '8.68353,49.412623'
        - name: lang
          in: query
          description: Sets the language of the response.
          type: string
          default: en
          enum:
            - de
            - en
            - fr
            - it
        - name: boundary_type
          in: query
          description: >-
            Specifies the type of spatial search restriction.  `rect` for a
            rectangle and `circle`
          type: string
          enum:
            - rect
            - circle
        - name: rect
          in: query
          description: >
            **For `boundary_type=rect` only!** Sets the restriction rectangle's
            minimum/maximum longitude/latitude: `MinLong,MinLat,MaxLong,Maxlat`.
            Example: `8.696837,49.408739,8.703489,49.41209`
          type: string
        - name: circle
          in: query
          description: >
            "**For `boundary_type=circle` only!** Sets the restriction circle
            with a Centerpoint and a Radius in meters: `Long,Lat,Radius`.
            Example: `8.696837,49.408739,5000`"
          type: string
        - name: limit
          in: query
          description: Specifies the maximum number of responses. Not needed for reverse.
          type: number
          default: 5
          format: double
        - name: id
          in: query
          description: >-
            Arbitrary identification string of the request reflected in the meta
            information.
          type: string
      responses:
        '200':
          description: Standard response for successfully processed requests. Returns JSON.
          schema:
            $ref: '#/definitions/Geocoderesponse'
        '400':
          description: The request is incorrect and therefore can not be processed.
        '401':
          description: Authorization field missing.
        '403':
          description: Key not authorised.
        '405':
          description: >-
            The specified HTTP method is not supported. For more details, refer
            to the EndPoint documentation.
        '413':
          description: >-
            The request is larger than the server is able to process, the data
            provided in the request exceeds the capacity limit.
        '500':
          description: >
            An unexpected error was encountered and more detailed internal

            errorcode is provided.


            | Internal Code | Description                                       
            |

            |:-------------:|----------------------------------------------------|

            | 1000 |  Unable to parse JSON request. |

            | 1001 |  Required parameter is missing. |

            | 1002 |  Invalid parameter format. |

            | 1003 |  Invalid parameter value. |

            | 1004 |  Parameter value exceeds the maximum allowed limit. |

            | 1006 |  Unable to parse the request to the export handler. |

            | 1007 |  Unsupported export format. |

            | 1008 |  Empty Element. |

            | 1099 |  Unknown internal error. |
          schema:
            $ref: '#/definitions/error'
        '501':
          description: >-
            Indicates that the server does not support the functionality needed
            to fulfill the request.
        '503':
          description: The server is currently unavailable due to overload or maintenance.
  /isochrones:
    get:
      tags:
        - Isochrones
      summary: Isochrones Service
      description: |
        The Isochrone Service supports time and distance analyses for one single
        or multiple locations. You may also specify the isochrone interval or
        provide multiple exact isochrone range values. This service allows the
        same range of profile options listed in the ORS Routing section which
        help you to further customize your request to obtain a more detailed
        reachability area response.
      parameters:
        - name: api_key
          in: query
          description: |
            Insert your API Key here.
          type: string
          required: true
          default: your-api-key
        - name: locations
          in: query
          description: |
            List of longitude, latitude coordinates delimited with pipe (|).
          required: true
          type: array
          items:
            type: string
          collectionFormat: pipes
          default:
            - '8.34234,48.23424'
        - name: profile
          in: query
          description: Specifies the routing profile.
          required: true
          type: string
          default: driving-car
          enum:
            - driving-car
            - driving-hgv
            - cycling-regular
            - cycling-road
            - cycling-safe
            - cycling-mountain
            - cycling-tour
            - foot-walking
            - foot-hiking
        - name: range_type
          in: query
          description: |
            Set _time_ for isochrones or _distance_ for equidistants.
          type: string
          default: time
        - name: range
          in: query
          description: >
            Maximum range value of the analysis in **seconds** for time and
            **meters** for distance. Alternatively a comma separated list of
            specific single range values.
          required: true
          type: number
          format: double
          default: 60
        - name: interval
          in: query
          description: >
            Interval of isochrones or equidistants for one range value. value in
            **seconds** for time and **meters** for distance.
          type: number
          format: double
          default: 20
        - name: units
          in: query
          description: |
            Unit format for  `range_type=distance`.
          type: string
          default: m
          enum:
            - m
            - km
            - mi
        - name: location_type
          in: query
          description: 'start treats the location(s) as starting point, destination as goal.'
          type: string
          default: start
          enum:
            - start
            - destination
        - name: attributes
          in: query
          description: >
            List of requested attributes delimited by pipe (|). Values are
            `area`, `reachfactor` and `total_pop`.

            | Value | Description|

            |:--:|---|

            | `area` | Returns the area of each polygon in its feature
            properties. |

            | `reachfactor` | Returns a reachability score between 0 and 1. |

            | `total_pop` | Returns the total population of each polygon based
            on [GHS data](http://ghsl.jrc.ec.europa.eu/about.php) |
          type: array
          items:
            type: string
            enum:
              - area
              - reachfactor
              - total_pop
          default:
            - area
          collectionFormat: pipes
          uniqueItems: true
        - name: options
          in: query
          description: >
            For advanced options formatted as json object. For structure refer
            to the **options model** below.

            The available parameters are:


              - `maximum_speed` : Specifies a maximum travel speed restriction in km/h.


              - `avoid_features` : Pipe (|) separated list of features to avoid.
                The available features are :

                  |     Feature         | Available for                               |
                  |:-------------------:|---------------------------------------------|
                  | `highways`          | driving-*                                   |
                  | `tollways`          | driving-*                                   |
                  | `ferries`           | driving-\*, cycling-\*, foot-\*, wheelchair |
                  | `tunnels`           | driving-*                                   |
                  | `pavedroads`        | driving-\*, cycling-*                       |
                  | `unpavedroads`      | driving-\*, cycling-*                       |
                  | `tracks`            | driving-*                                   |
                  | `fords`             | driving-\*, cycling-\*, foot-*              |
                  | `steps`             | cycling-\*, foot-\*, wheelchair             |
                  | `hills`             | cycling-\*, foot-\*                         |

              - `avoid_borders` : `"all"` for no border crossing. `"controlled"` to cross open borders but avoid controlled ones. Only for `driving-*` profiles.
              
              - `avoid_countries` : Pipe (|) separated list of countries to exclude from routing with `driving-*` profiles. Can be used together with `"avoid_features": "controlledborders"`. `"11|193"` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://github.com/GIScience/openrouteservice-docs#country-list).

              - `vehicle_type` (for `profile=driving-hgv` only): `hgv`,`bus`,`agricultural`,`delivery`,`forestry` and `goods`. It is needed for **vehicle restrictions** to work.


              - `profile_params` : Specifies additional routing parameters.
                - `weightings`: Weightings will prioritize specified factors over the shortest path.
                  - `steepness_difficulty`: Specifies the fitness level for `cycling-*` profiles.
                    - `level`: `0` = Novice, `1` = Moderate, `2` = Amateur, `3` = Pro. The prefered gradient increases with level

                  - `green`: Specifies the Green factor for `foot-*` profiles.
                    - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer ways through green areas over a shorter route.

                  - `quiet`: Specifies the Quiet factor for `foot-*` profiles.
                    - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer quiet ways over a shorter route.

                - `restrictions` : Specifies restrictions for `driving-hgv`, `wheelchair` or `cycling-*` profiles.
                  - for `cycling-*`: 
                      
                      |  Parameter | Description                                                                                                                                                                               |
                      |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                      | `gradient` | Only for avoided `hills` or specified `steepness_difficulty`. Specifies the maximum route steepness in percent. Values range from `1` to `15`. Routes with a higher gradient are avoided. |

                  - for `driving-hgv`: 
                    _(you have to specify the `vehicle_type` in the options for these parameters)_
                  
                      |  Parameter | Description                                                                                                                       |
                      |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|
                      | `length`   | Length restriction in meters.                                                                                                     |
                      | `width`    | Width restriction in meters.                                                                                                      |
                      | `height`   | Height restriction in meters.                                                                                                     |
                      | `axleload` | Axleload restriction in tons.                                                                                                     |
                      | `weight`   | Weight restriction in tons.                                                                                                       |
                      | `hazmat`   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |

                  - for `wheelchair`:

                    |       Parameter       | Description                                                                                                         |
                    |:---------------------:|---------------------------------------------------------------------------------------------------------------------|
                    |     `surface_type`    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is `"cobblestone:flattened"`. |
                    |      `track_type`     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is `"grade1"`.        |
                    |   `smoothness_type`   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is `"good"`.    |
                    | `maximum_sloped_curb` | Specifies the maximum height of the sloped curb in meters. Values are `0.03`, `0.06`(default), `0.1` or `any`.      |
                    |   `maximum_incline`   | Specifies the maximum incline as a percentage. `3`, `6`(default), `10`, `15` or `any`.                              |


              - `avoid_polygons` : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).

            This is an example options object for a `cycling-*` profile:


            ```json

            {
              "maximum_speed": 10,
              "avoid_features": "unpavedroads",
              "profile_params": {
                "weightings": {
                  "steepness_difficulty": {
                    "level": 1
                  },
                  "green": {
                    "factor": 0.8
                  },
                  "quiet": {
                    "factor": 1.0
                  }
                },
                "restrictions": {
                  "gradient": 5
                }
              },
              "avoid_polygons": {
                "type": "Polygon",
                "coordinates": [
                                [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
               ]}
            }

            ```

            The minified form(for copy paste purposes):


            `{"maximum_speed":10,"avoid_features":"unpavedroads","profile_params":{"weightings":{"steepness_difficulty":{"level":1},"green":{"factor":0.8},"quiet":{"factor":1.0}},"restrictions":{"gradient":5}},"avoid_polygons":{"type":"Polygon","coordinates":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}`


            More examples can be found
            [here](https://github.com/GIScience/openrouteservice-docs#examples).
          type: string
        - name: intersections
          in: query
          description: |
            Specifies whether to return intersection polygons.
          type: boolean
          default: false
        - name: id
          in: query
          description: >-
            Arbitrary identification string of the request reflected in the meta
            information.
          type: string
      responses:
        '200':
          description: Standard response for successfully processed requests. Returns JSON.
          schema:
            $ref: '#/definitions/IsochronesResponse'
        '400':
          description: The request is incorrect and therefore can not be processed.
        '401':
          description: Authorization field missing.
        '403':
          description: Key not authorised.
        '405':
          description: >-
            The specified HTTP method is not supported. For more details, refer
            to the EndPoint documentation.
        '413':
          description: >-
            The request is larger than the server is able to process, the data
            provided in the request exceeds the capacity limit.
        '500':
          description: >
            An unexpected error was encountered and more detailed internal

            errorcode is provided.


            | Internal Code | Description                                       
            |

            |:-------------:|----------------------------------------------------|

            | 3000 |  Unable to parse JSON request. |

            | 3001 |  Required parameter is missing. |

            | 3002 |  Invalid parameter format. |

            | 3003 |  Invalid parameter value. |

            | 3004 |  Parameter value exceeds the maximum allowed limit. |

            | 3005 |  Requested feature is not supported. |

            | 3006 |  Unable to parse the request to the export handler. |

            | 3007 |  Unsupported export format. |

            | 3008 |  Empty Element. |

            | 3099 |  Unknown internal error. |
          schema:
            $ref: '#/definitions/error'
        '501':
          description: >-
            Indicates that the server does not support the functionality needed
            to fulfill the request.
        '503':
          description: The server is currently unavailable due to overload or maintenance.
  /places:
    $ref: >-
      https://raw.githubusercontent.com/GIScience/openpoiservice/master/openpoiservice/server/api/pois_post.yml
  /matrix:
    get:
      tags:
        - Matrix
      summary: Matrix Service (GET)
      description: >
        Returns duration or distance matrix for mutliple source and destination
        points.

        By default a symmetric duration matrix is returned where every point in
        `locations` is paired with each other. The result is `null` if a value
        can't be determined.
      parameters:
        - name: api_key
          in: query
          description: |
            Insert your API Key here.
          type: string
          required: true
          default: your-api-key
        - name: profile
          in: query
          description: Specifies the route profile.
          required: true
          type: string
          enum:
            - driving-car
            - driving-hgv
            - cycling-regular
            - cycling-road
            - cycling-safe
            - cycling-mountain
            - cycling-tour
            - cycling-electric
            - foot-walking
            - foot-hiking
            - wheelchair
          default: driving-car
        - name: locations
          in: query
          description: >
            Pipe (|) separated List of `longitude,latitude` coordinates


            Example values: `9.970093,48.477473` `9.207916,49.153868`
            `37.573242,55.801281` `115.663757,38.106467`
          required: true
          type: array
          items:
            type: string
          collectionFormat: pipes
          default:
            - >-
              9.970093,48.477473|9.207916,49.153868|37.573242,55.801281|115.663757,38.106467
        - name: sources
          in: query
          description: >
            A comma separated list of indices that refers to the list of
            locations (starting with `0`). {index_1},{index_2}(,{index_N} ...)
            or `all` (default).


            Example: `0,3` for the first and fourth Location.
          type: array
          items:
            type: string
          default:
            - '0,1,2'
        - name: destinations
          in: query
          description: >
            A comma separated list of indices that refers to the list of
            locations (starting with `0`). {index_1},{index_2}[,{index_N} ...]
            or `all` (default).


            Example: `0,3` for the first and fourth Location.
          type: array
          items:
            type: string
          default:
            - all
        - name: metrics
          in: query
          description: >
            Specifies a list of returned metrics separated with a pipe character
            (|).

            * `distance` - Returns distance matrix for specified points in
            *seconds*.

            * `duration` - Returns duration matrix for specified points in
            defined `units`.
          type: array
          collectionFormat: pipes
          uniqueItems: true
          items:
            type: string
            enum:
              - distance
              - duration
          default:
            - duration
        - name: resolve_locations
          in: query
          description: >
            Specifies whether given locations are resolved or not. If the
            parameter value set to `true`, every element in destinations and
            sources will contain the `name` element that identifies the name of
            the closest street. Default: `false`
          type: boolean
          default: false
          enum:
            - true
            - false
        - name: units
          in: query
          description: Specifies the unit of measurement for distances (only).
          type: string
          default: m
          enum:
            - m
            - km
            - mi
        - name: optimized
          in: query
          description: >
            Specifies whether Dijkstra algorithm (`false`) or any available
            technique to speed up shortest-path routing (`true`) is used. For
            normal Dijkstra the number of visited nodes is limited to `100000`
          type: boolean
          default: true
          enum:
            - true
            - false
      responses:
        '200':
          description: |
            Standard response for successfully processed requests. Returns JSON.
          schema:
            $ref: '#/definitions/MatrixResponse'
        '400':
          description: The request is incorrect and therefore can not be processed.
        '401':
          description: Authorization field missing.
        '403':
          description: Key not authorised.
        '405':
          description: >-
            The specified HTTP method is not supported. For more details, refer
            to the EndPoint documentation.
        '413':
          description: >-
            The request is larger than the server is able to process, the data
            provided in the request exceeds the capacity limit.
        '500':
          description: >
            An unexpected error was encountered and more detailed internal

            errorcode is provided.


            | Internal Code | Description                                       
            |

            |:-------------:|----------------------------------------------------|

            | 6000 |  Unable to parse JSON request. |

            | 6001 |  Required parameter is missing. |

            | 6002 |  Invalid parameter format. |

            | 6003 |  Invalid parameter value. |

            | 6004 |  Parameter value exceeds the maximum allowed limit. |

            | 6006 |  Unable to parse the request to the export handler. |

            | 6007 |  Unsupported export format. |

            | 6008 |  Empty Element. |

            | 6099 |  Unknown internal error. |
          schema:
            type: array
            items:
              $ref: '#/definitions/error'
        '501':
          description: >-
            Indicates that the server does not support the functionality needed
            to fulfill the request.
        '503':
          description: The server is currently unavailable due to overload or maintenance.
    post:
      tags:
        - Matrix
      summary: Matrix Service (POST)
      description: >
        Returns duration or distance or matrix for mutliple source and
        destination points.


        Body example:

        ```{'profile': 'driving-hgv', 'metrics': 'duration|distance',
        'optimized': true, 'units': 'm', 'locations': [[7.796, 48.35], [11.13,
        50.98]]}```
      parameters:
        - name: api_key
          in: query
          description: |
            Insert your API Key here.
          type: string
          required: true
          default: your-api-key
        - name: body
          in: body
          description: body for a Matrix post request
          required: true
          schema:
            $ref: '#/definitions/MatrixBody'
            example: >
              {"profile": "driving-hgv", "metrics": "duration", "optimized":
              True, "units": "m", "locations": [[7.796, 48.35], [11.13, 50.98]]}

              # profile: driving-hgv

              # metrics: duration

              # optimized: True

              # units: m

              # locations: 

              #   - - 7.796 

              #     - 48.35

              #   - - 11.13

              #     - 50.98
      responses:
        '200':
          description: |
            Standard response for successfully processed requests. Returns JSON.
          schema:
            $ref: '#/definitions/MatrixResponse'
        '400':
          description: The request is incorrect and therefore can not be processed.
        '401':
          description: Authorization field missing.
        '403':
          description: Key not authorised.
        '405':
          description: >-
            The specified HTTP method is not supported. For more details, refer
            to the EndPoint documentation.
        '413':
          description: >-
            The request is larger than the server is able to process, the data
            provided in the request exceeds the capacity limit.
        '500':
          description: >
            An unexpected error was encountered and more detailed internal

            errorcode is provided.


            | Internal Code | Description                                       
            |

            |:-------------:|----------------------------------------------------|

            | 6000 |  Unable to parse JSON request. |

            | 6001 |  Required parameter is missing. |

            | 6002 |  Invalid parameter format. |

            | 6003 |  Invalid parameter value. |

            | 6004 |  Parameter value exceeds the maximum allowed limit. |

            | 6006 |  Unable to parse the request to the export handler. |

            | 6007 |  Unsupported export format. |

            | 6008 |  Empty Element. |

            | 6099 |  Unknown internal error. |
          schema:
            type: array
            items:
              $ref: '#/definitions/error'
        '501':
          description: >-
            Indicates that the server does not support the functionality needed
            to fulfill the request.
        '503':
          description: The server is currently unavailable due to overload or maintenance.
securityDefinitions:
  UserSecurity:
    name: api_key
    description: |
      Add your API Key as the value of the api_key parameter to your request.
    type: apiKey
    in: query
definitions:
  Hello:
    type: string
    default: Hello
  $ref: >-
    https://raw.githubusercontent.com/GIScience/openpoiservice/master/openpoiservice/server/api/pois_post.yml
